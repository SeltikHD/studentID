generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // Uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // Uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // Used for migrations
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") // Session token (used for authentication)
  expiresAt    DateTime @default(dbgenerated("now() + interval '8 hours'")) @map("expires_at") // Timestamp of expiration
  userId       String?  @map("user_id") // User who owns the session
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of session creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model User {
  id          String    @id @default(cuid())
  name        String // User's name
  email       String?   @unique // User's email (unique)
  avatar      String? // URL of user's profile picture
  phoneNumber String?   @unique @map("phone_number") // User's phone number
  sessions    Session[] // Sessions opened by the user
  driver      Driver? // Driver associated with the user
  student     Student? // Student associated with the user
  admin       Admin? // Admin associated with the user

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of user creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model Driver {
  id       String      @id @default(cuid())
  rfid     String      @unique // Driver's RFID (unique)
  students Student[] // Students associated with the driver
  userId   String      @unique @map("user_id") // User's ID
  user     User        @relation(fields: [userId], references: [id])
  acesses  AccessLog[] // Access logs of the driver (opening doors)

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of driver creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

enum Role {
  SUPER_ADMIN // Super admin
  ADMIN // Admin
  USER // User
}

model Admin {
  id     String @id @default(cuid())
  type   Role // Type of admin
  userId String @unique @map("user_id") // User's ID
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of admin creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model Student {
  id          String       @id @default(cuid())
  suapId      String       @unique @map("suap_id") // Student's SUAP ID (unique)
  rfid        String       @unique // Student's RFID (unique)
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique @map("user_id") // User's ID
  medicalInfo MedicalInfo? // Student's medical info
  driverId    String?      @map("driver_id") // Driver's ID
  driver      Driver?      @relation(fields: [driverId], references: [id]) // Driver associated with the student (if any)
  acesses     AccessLog[] // Access logs of the student (opening doors)

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of student creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model MedicalInfo {
  id            String   @id @default(cuid())
  bloodType     String?  @map("blood_type") // User's blood type
  allergies     String[] // User's allergies
  diseases      String[] // User's diseases
  medications   String[] // User's medications
  deficiencies  String[] // User's deficiencies
  useHearingAid Boolean  @default(false) @map("use_hearing_aid") // User uses hearing aid
  useWheelchair Boolean  @default(false) @map("use_wheelchair") // User uses wheelchair
  studentId     String   @unique @map("student_id") // Student who owns the medical info
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of medical info creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model AccessLog {
  id        String   @id @default(cuid())
  studentId String?  @map("student_id") // Student who opened the door
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  driverId  String?  @map("driver_id") // Driver who opened the door
  driver    Driver?  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  doorId    String   @map("door_id") // Door that was opened
  door      Door     @relation(fields: [doorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of access log creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model Door {
  id          String      @id @default(cuid())
  name        String? // Door's name
  description String? // Door's description]
  accesses    AccessLog[] // Access logs of the door

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of door creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}

model CreationRequest {
  id        Int      @id @default(autoincrement())
  rfid      String   @unique // User's RFID (unique)
  expiresAt DateTime @default(dbgenerated("now() + interval '1 week'")) @map("expires_at") // Timestamp of expiration
  used      Boolean  @default(false) // Whether the request was used

  createdAt DateTime @default(now()) @map("created_at") // Timestamp of creation request creation
  updatedAt DateTime @updatedAt @map("updated_at") // Timestamp of last update
}
